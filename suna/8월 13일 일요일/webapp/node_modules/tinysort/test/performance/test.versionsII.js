/*global test, iddqd, Benchmark, Promise, require,requirejs*/
(function(test){
	'use strict';

//	require.config({baseUrl: '../../src/'});
//	requirejs(['tinysort'],function(sort){
//		console.log('requirejs',!!sort,arguments); // log
//	});
	/*require.config({baseUrl: '../../src/'});
	requirejs(['../test/performance/tinysort'],function(sort){
		console.log('requirejs',!!sort,arguments); // log
	});*/
//	require.config({baseUrl: ''});
//	requirejs(['tinysort'],function(sort){
//		console.log('tinysort',!!sort,arguments); // log
//	});
//	require.config({baseUrl: '../../src/'});
//	requirejs(['tinysort'],function(sort){
//		console.log('tinysort',!!sort,arguments); // log
//	});
//	require.config({baseUrl: ''});
//	requirejs(['tinysort.2.1.2'],function(sort){
//		console.log('tinysort.2.1.2',!!sort,arguments); // log
//	});



	requirejs.config({
		paths: {
			v1: 'tinysort'
			,v2: '../../src/tinysort'
		}
		,waitSeconds: 1
	});
	requirejs(['v1'],function(sort){
		console.log('v1',!!sort,arguments); // log
	});
	requirejs(['v2'],function(sort){
		console.log('v2',!!sort,arguments); // log
	});



	/*require.config({baseUrl:''});
	requirejs(['tinysort.2.1.2'],function(sort){
		console.log('requirejs',!!sort,arguments); // log
	});*/

	var loadScript = iddqd.pattern.callbackToPromise(iddqd.loadScript)
		,createElement = iddqd.createElement
		,aCompare = []
		,wait = function(){
				return new Promise(function(fullfill){
					setTimeout(fullfill,40);
				});
			}
	;

	test.add('_v2.0.97 versus current',function(name){
		aCompare.length = 0;
		startTest(name,'tinysort.2.0.97','../../src/tinysort');
		/*wait()
			.then(loadScript.bind(null,'tinysort.2.0.97.js'))
			.then(versionLoaded.bind(null,false,'2.0.97'))
			.then(loadScript.bind(null,'../../src/tinysort.js'))
			.then(versionLoaded.bind(null,false,'current'))
			.then(startTest.bind(null,name))
			.catch(console.warn.bind(console))
		;*/
	});

	function startTest(name,version1,version2){
		test.log.clear();
		test.log('start:',name,"\n"); // log

		// prepare DOM
		var aDOM = [], i = 10;
		while (i--) aDOM.push(getList(10));

		var suite = new Benchmark.Suite();

		// add tests
//		require.config({baseUrl:''});
		requirejs([version1],function(sort){
			console.log('sort',arguments); // log
			suite.add('TinySort 1', function(a){
				sort(aDOM[0].querySelectorAll('li'));
				aDOM.unshift(aDOM.pop());
			});
			added(sort);
		});
		requirejs([version2],function(sort){
			console.log('sort',arguments); // log
			suite.add('TinySort 2', function(a){
				sort(aDOM[0].querySelectorAll('li'));
				aDOM.unshift(aDOM.pop());
			});
			added(sort);
		});

		/*aCompare.forEach(function(compare){
			suite.add('TinySort '+compare.version, function(a){
				if (compare.isJquery)	compare.fn.call(jQuery(aDOM[0]).find('li'));
				else					compare.fn(aDOM[0].querySelectorAll('li'));
				aDOM.unshift(aDOM.pop());
			});
		});*/

		// add listeners
		suite
			.on('cycle',handleSuiteCycle)
			.on('complete',handleSuiteComplete)
		;

		var iAdded = 0;
		function added(fn){
			console.log('fn',fn); // log
			iAdded++;
			if (iAdded===2)suite.run({ 'async': true });
		}
	}

	function handleSuiteCycle(e) {
		console.log('handleSuiteCycle',e); // log
		test.log(String(e.target));
	}

	function handleSuiteComplete(e) {
		console.log('handleSuiteComplete',e); // log
		var oSuite = e.currentTarget;
		test.log('=');
		test.log('Fastest is ' + oSuite.filter('fastest').pluck('name'));
		// test.log('Fastest is ' + this.filter('fastest').pluck('name'));
		// console.log('t1/t2',t1.stats.mean/t2.stats.mean); // log
	}

	function getList(len){
		if (len===undefined) len = 100;
		var mUl = createElement('ul');
		while (len--) createElement('li',null,mUl,null,1E9*Math.random()<<0);
		return mUl;
	}

})(test);
